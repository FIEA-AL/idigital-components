.inpContainer * {
    transition: all 0.3s ease-out 0.1s;
  }

  .inpContainer {
    display: flex;
    position: relative;
    flex-flow: column-reverse nowrap;

    gap: 8px;
    width: 100%;
  }

  .txtContainer {
    display: flex;
    flex-flow: column;
  }

  .inpInfo {
    font-size: 12px;
    font-weight: 300;
  }

  .inpLabel {
    font-size: 16px;
    font-weight: 500;
    color: var(--color-input);
  }

  .inpError {
    font-size: 12px;
    font-weight: 400;

    text-align: right;
    color: var(--color-input-invalid);
  }

  input {
    outline: none;
    appearance: none;

    width: 100%;
    padding: 12px;

    border-style: solid;
    border-width: 2px;
    border-radius: 12px;
    border-color: var(--color-input-border);

    font-size: 16px;
    font-weight: 500;

    color: var(--color-input);
    background-color: var(--color-background);
  }

  input::placeholder {
    font-size: 14px;
    color: var(--color-input-placeholder);
  }

  input:hover {
    filter: drop-shadow(0px 4px 4px var(--color-input-shadow));
    border-color: var(--color-input-hover-border);
  }

  input:focus {
    border-color: var(--color-input-focus-border);
  }
  input:focus + .txtContainer > .inpLabel {
    color: var(--color-input-focus);
  }

  input[invalid="true"] {
    border-color: var(--color-input-invalid-border);
  }
  input[invalid="true"] + .txtContainer > .inpLabel {
    color: var(--color-input-invalid);
  }

  input:disabled,
  input:read-only {
    color: var(--color-input-disabled);
    border-color: transparent;
    background-color: var(--color-input-disabled-background);
  }

  input:disabled + .txtContainer > .inpLabel,
  input:read-only + .txtContainer > .inpLabel {
    color: var(--color-input-disabled);
  }